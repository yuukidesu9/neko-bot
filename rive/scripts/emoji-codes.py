#!/usr/bin/env python3

"""This script generates emoji-sub.rive using the emoji code map found at
https://github.com/iamcal/emoji-data

Usage: python3 scripts/emoji-codes.py [--all] > emoji-sub.rive

By default, 'non-useful' codes are skipped; provide `--all` to map ALL emoji
symbols. Note that in doing so you'll slow your bot down, as all substitutions
have to be tried on all messages.
"""

import datetime
import json
import os
import os.path
import re
import requests
import sys

EMOJI_CODES = "https://raw.githubusercontent.com/iamcal/emoji-data/master/emoji.json"
RIVE_HEADER = """/******************************************************************************
 * Aiden - A RiveScript Chatbot Personality                                   *
 *----------------------------------------------------------------------------*
 * This source code is released under a Creative Commons                      *
 * Attribution-ShareAlike International License.                              *
 * (C) Noah Petherbridge 2015                                                 *
 ******************************************************************************/
! version = 2.0

/***
 * Substitutions for Emoji unicode symbols, generated by the emoji-codes.py
 * script on {} -- do not edit this file directly.
 * Any custom changes to this file may be wiped out next time the script
 * has been run.
 ***/
"""

def main(include_all=False):
    """Build the emoji RiveScript substitutions file."""

    # Get the exclude list.
    blacklist = get_excludes()

    # Get the latest emoji codes.
    r = requests.get(EMOJI_CODES)
    if r.status_code != 200:
        print("Failed to get emoji code URL ({}) - code {}".format(
            EMOJI_CODES, r.status_code,
        ))
        sys.exit(1)
    data = json.loads(r.text)

    print(RIVE_HEADER.format(datetime.datetime.utcnow().isoformat()))

    for codepoint in data:
        unified = codepoint["unified"].split("-")
        character = "".join(chr(int(x, 16)) for x in unified)
        shortnames = [ x.replace("_", "-") for x in codepoint["short_names"] ]
        for shortname in shortnames:
            if not include_all and exclude(blacklist, shortname):
                continue
            print("! sub {} = {}".format(character, shortname))

def get_excludes():
    """Get the list of shortnames to exclude."""
    blacklist = []
    path = os.path.abspath(os.path.dirname(__file__))
    with open("{}/emoji-skip.rive".format(path), "rb") as fh:
        for line in fh.readlines():
            line = line.decode()
            if line.startswith("! sub"):
                match = re.search(r'^! sub .* = (.+?)$', line)
                if match:
                    regexp = match.group(1)
                    regexp = regexp.replace('*', '.+?').replace('+', r'\+').replace('-', r'\-')
                    regexp = re.compile(r'^{}$'.format(match.group(1)))
                    blacklist.append(regexp)
    return blacklist

def exclude(blacklist, shortname):
    """Determine if the shortname is blacklisted."""
    for test in blacklist:
        if re.search(test, shortname):
            return True

if __name__ == "__main__":
    if sys.version_info[0] < 3:
        print("Have Python 3?")
        sys.exit(1)
    if len(sys.argv) > 1 and sys.argv[1] == "--all":
        main(True)
    else:
        main()
